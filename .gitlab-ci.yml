#
# Copyright 2016-2018 GPC.solutions
# Copyright 2019 devx
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://docs.gitlab.com/ce/ci/yaml/README.html
# https://gitlab.gpcsolutions.fr/help/ci/quick_start/README
# https://gitlab.gpcsolutions.fr/help/ci/examples/test-and-deploy-python-application-to-heroku.md

image: node:10.15.3-stretch

# # TODO: make custom base image

stages:
  - lint
  - test
  - deploy
#   - release
#   - deploy

lint:
  stage: lint
  before_script:
    - npm ci
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-lint/
  script:
    - npm run lint

integration:
  stage: test
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-test/
  before_script:
    - echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90forceyes
    - apt-get update
    - apt-get install lsb-release
    - export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release --codename --short)"
    - echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    - apt-get update
    - apt-get install google-cloud-sdk-datastore-emulator
    - npm ci
    - echo ${TEST_ENV} | base64 --decode > "${CI_PROJECT_DIR}/config/test/.env"
  script:
    - npm run test
# See https://cloud.google.com/sdk/docs/components?hl=fr#external_package_managers
#   # See: https://docs.gitlab.com/ee/ci/yaml/#coverage
#   coverage: '/TOTAL.*?(\d+\%)/'

.deploy_before_script: &deploy_before_script
  before_script:
    - echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90forceyes
    - apt-get update
    - apt-get dist-upgrade
    - apt-get install lsb-release
    - export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release --codename --short)"
    - echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    - apt-get update
    - apt-get install google-cloud-sdk
    - export CLOUDSDK_CORE_DISABLE_PROMPTS=1  # Non interactive gcloud. Same as --quiet.
    - echo ${GAE_SERVICE_ACCOUNT_KEY} | base64 --decode > "/tmp/credential_key.json"

staging:
  <<: *deploy_before_script
  stage: deploy
  environment:
    name: staging/$CI_COMMIT_SHORT_SHA
    url: https://staging-dot-$GCLOUD_PROJECT.appspot.com
  except:
    - tags
  only:
    - master
  script:
    - mkdir ${CI_PROJECT_DIR}/config/production
    - echo ${STAGING_ENV} | base64 --decode > "${CI_PROJECT_DIR}/config/production/.env"
    - echo ${STAGING_PRIVATE_PEM} | base64 --decode > "${CI_PROJECT_DIR}/config/production/private.pem"
    - echo ${STAGING_PUBLIC_PEM} | base64 --decode > "${CI_PROJECT_DIR}/config/production/public.pem"
    - gcloud auth activate-service-account --key-file="/tmp/credential_key.json"
    - gcloud config set project ${GCLOUD_PROJECT}
    # Make sure version is prepended by a 'v' as versions should start with a letter to avoid confusion with instances
    # that use the same URI mechanism but always start by a number.
    - gcloud app deploy --version staging --no-promote "${CI_PROJECT_DIR}/app.yaml"
    # TODO: automate marketplace publication

production:
  <<: *deploy_before_script
  stage: deploy
  environment:
    name: production
    url: https://production-dot-$GCLOUD_PROJECT.appspot.com
  only:
    - tags
  script:
    - mkdir ${CI_PROJECT_DIR}/config/production
    - echo ${PRODUCTION_ENV} | base64 --decode > "${CI_PROJECT_DIR}/config/production/.env"
    - echo ${PRODUCTION_PRIVATE_PEM} | base64 --decode > "${CI_PROJECT_DIR}/config/production/private.pem"
    - echo ${PRODUCTION_PUBLIC_PEM} | base64 --decode > "${CI_PROJECT_DIR}/config/production/public.pem"
    - gcloud auth activate-service-account --key-file="/tmp/credential_key.json"
    - gcloud config set project ${GCLOUD_PROJECT}
    # Make sure version is prepended by a 'v' as versions should start with a letter to avoid confusion with instances
    # that use the same URI mechanism but always start by a number.
    - gcloud app deploy --version v${CI_COMMIT_SHORT_SHA} --promote "${CI_PROJECT_DIR}/app.yaml"
